query getAssemblies($projectId: String!) {
  assemblies(projectId: $projectId) {
    id
    name
    category
    gwp
    conversionFactor
    lifeTime
    unit
    projectId
    layers {
      id
      name
      epdId
      epdName
      description
      conversionFactor
      referenceServiceLife
    }
    description
    metaFields
  }
}

query getProjectEpds($projectId: String!) {
  projectEpds(projectId: $projectId) {
    id
    name
    declaredUnit
    referenceServiceLife
  }
}

query getProjectEpd($projectId: String!, $epdId: String!) {
  projectEpds(projectId: $projectId, filters: { id: { equal: $epdId } }) {
    id
    name
    source
    gwp {
      a1a3
      c3
      c4
      d
    }
    version
    validUntil
    publishedDate
    location
    declaredUnit
    subtype
  }
}

query getProjectMembers($projectId: String!) {
  projectMembers(projectId: $projectId) {
    id
    userId
    name
    userId
    email
    company
    lastLogin
    projectId
    projectGroups {
      id
      name
    }
  }
}

query getAccount {
  account {
    id
    name
    email
  }
}

enum AssemblyUnit {
  M
  M2
  M3
  KG
  PCS
  NONE
}

mutation addAssembly(
  $name: String!
  $category: String!
  $projectId: String!
  $description: String
  $unit: AssemblyUnit!
  $lifeTime: Float = 50
  $metaFields: JSON = null
  $conversionFactor: Float = 1
) {
  addAssembly(
    name: $name
    category: $category
    projectId: $projectId
    description: $description
    lifeTime: $lifeTime
    unit: $unit
    metaFields: $metaFields
    conversionFactor: $conversionFactor
  ) {
    name
    category
  }
}

mutation updateAssembly(
  $id: String!
  $name: String!
  $category: String!
  $description: String
  $unit: AssemblyUnit!
  $lifeTime: Float = 50
  $metaFields: JSON = null
  $conversionFactor: Float = 1
) {
  updateAssembly(
    id: $id
    name: $name
    category: $category
    description: $description
    lifeTime: $lifeTime
    unit: $unit
    metaFields: $metaFields
    conversionFactor: $conversionFactor
  ) {
    name
  }
}

mutation deleteAssembly($id: String!) {
  deleteAssembly(id: $id)
}

input AssemblyLayerInput {
  epdId: String!
  id: String
  name: String
  conversionFactor: Float
  referenceServiceLife: Int
  description: String
}

input AssemblyLayerUpdateInput {
  id: String!
  epdId: String
  name: String
  conversionFactor: Float
  referenceServiceLife: Int
  description: String
}

input AssemblyLayerDeleteInput {
  id: String!
}

mutation addAssemblyLayers($id: String!, $layers: [AssemblyLayerInput!]!) {
  addAssemblyLayers(id: $id, layers: $layers) {
    id
    name
    epdId
  }
}

mutation updateAssemblyLayers($id: String!, $layers: [AssemblyLayerUpdateInput!]!) {
  updateAssemblyLayers(id: $id, layers: $layers) {
    id
    name
    epdId
  }
}

mutation deleteAssemblyLayers($id: String!, $layers: [AssemblyLayerDeleteInput!]!) {
  deleteAssemblyLayers(id: $id, layers: $layers)
}
