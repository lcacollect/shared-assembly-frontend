query getProjectAssemblies($projectId: String!) {
  projectAssemblies(projectId: $projectId) {
    id
    name
    category
    gwp
    conversionFactor
    lifeTime
    unit
    projectId
    layers {
      id
      name
      epdId
      description
      conversionFactor
      referenceServiceLife
      transportEpd {
        id
        name
        declaredUnit
      }
      transportDistance
      transportConversionFactor
    }
    description
    metaFields
  }
}

query getProjectEpds($projectId: String!, $filters: ProjectEPDFilters) {
  projectEpds(projectId: $projectId, filters: $filters) {
    id
    name
    declaredUnit
    referenceServiceLife
  }
}

query getProjectEpd(
  $projectId: String!
  $epdId: String!
  $a1a3: Boolean = false
  $a4: Boolean = false
  $a5: Boolean = false
  $b1: Boolean = false
  $b2: Boolean = false
  $b3: Boolean = false
  $b4: Boolean = false
  $b5: Boolean = false
  $b6: Boolean = false
  $b7: Boolean = false
  $c1: Boolean = false
  $c2: Boolean = false
  $c3: Boolean = false
  $c4: Boolean = false
  $d: Boolean = false
) {
  projectEpds(projectId: $projectId, filters: { id: { equal: $epdId } }) {
    id
    name
    source
    gwp {
      a1a3 @include(if: $a1a3)
      a4 @include(if: $a4)
      a5 @include(if: $a5)
      b1 @include(if: $b1)
      b2 @include(if: $b2)
      b3 @include(if: $b3)
      b4 @include(if: $b4)
      b5 @include(if: $b5)
      b6 @include(if: $b6)
      b7 @include(if: $b7)
      c1 @include(if: $c1)
      c2 @include(if: $c2)
      c3 @include(if: $c3)
      c4 @include(if: $c4)
      d @include(if: $d)
    }
    version
    validUntil
    publishedDate
    location
    declaredUnit
    subtype
    isTransport
  }
}

query getProjectMembers($projectId: String!) {
  projectMembers(projectId: $projectId) {
    id
    userId
    name
    userId
    email
    company
    lastLogin
    projectId
    projectGroups {
      id
      name
    }
  }
}

query getAccount {
  account {
    id
    name
    email
  }
}

query getprojectStages($projectId: String!) {
  projectStages(projectId: $projectId) {
    stageId
    projectId
    name
    category
    phase
  }
}

enum AssemblyUnit {
  M
  M2
  M3
  KG
  PCS
  NONE
}

mutation addProjectAssemblies($assemblies: [ProjectAssemblyAddInput!]!) {
  addProjectAssemblies(assemblies: $assemblies) {
    name
    category
  }
}

mutation updateProjectAssemblies($assemblies: [ProjectAssemblyUpdateInput!]!) {
  updateProjectAssemblies(assemblies: $assemblies) {
    name
  }
}

mutation deleteProjectAssemblies($ids: [ID!]!) {
  deleteProjectAssemblies(ids: $ids)
}

input AssemblyLayerInput {
  epdId: String!
  id: String
  name: String
  conversionFactor: Float
  referenceServiceLife: Int
  description: String
  transportType: TransportType
  transportDistance: Float
  transportUnit: String
}

input AssemblyLayerUpdateInput {
  id: String!
  epdId: String!
  name: String
  conversionFactor: Float
  referenceServiceLife: Int
  description: String
  transportType: TransportType
  transportDistance: Float
  transportUnit: String
}

mutation addProjectAssemblyLayers($id: ID!, $layers: [AssemblyLayerInput!]!) {
  addProjectAssemblyLayers(id: $id, layers: $layers) {
    id
    name
  }
}

mutation updateProjectAssemblyLayers($id: ID!, $layers: [AssemblyLayerUpdateInput!]!) {
  updateProjectAssemblyLayers(id: $id, layers: $layers) {
    id
    name
  }
}

mutation deleteProjectAssemblyLayers($id: ID!, $layers: [ID!]!) {
  deleteProjectAssemblyLayers(id: $id, layers: $layers)
}
