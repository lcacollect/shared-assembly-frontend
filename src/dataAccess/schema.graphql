query getProjectAssemblies($projectId: String!) {
  projectAssemblies(projectId: $projectId) {
    id
    name
    category
    gwp
    conversionFactor
    lifeTime
    unit
    projectId
    layers {
      id
      name
      epdId
      description
      conversionFactor
      referenceServiceLife
      transportType
      transportDistance
      transportUnit
    }
    description
    metaFields
  }
}

query getProjectEpds($projectId: String!) {
  projectEpds(projectId: $projectId) {
    id
    name
    declaredUnit
    referenceServiceLife
  }
}

query getProjectEpd($projectId: String!, $epdId: String!) {
  projectEpds(projectId: $projectId, filters: { id: { equal: $epdId } }) {
    id
    name
    source
    gwp {
      a1a3
      c3
      c4
      d
    }
    version
    validUntil
    publishedDate
    location
    declaredUnit
    subtype
  }
}

query getProjectMembers($projectId: String!) {
  projectMembers(projectId: $projectId) {
    id
    userId
    name
    userId
    email
    company
    lastLogin
    projectId
    projectGroups {
      id
      name
    }
  }
}

query getAccount {
  account {
    id
    name
    email
  }
}

query getprojectStages($projectId: String!) {
  projectStages(projectId: $projectId) {
    stageId
    projectId
    name
    category
    phase
  }
}

enum AssemblyUnit {
  M
  M2
  M3
  KG
  PCS
  NONE
}

mutation addProjectAssemblies($assemblies: [ProjectAssemblyAddInput!]!) {
  addProjectAssemblies(assemblies: $assemblies) {
    name
    category
  }
}

mutation updateProjectAssemblies($assemblies: [ProjectAssemblyUpdateInput!]!) {
  updateProjectAssemblies(assemblies: $assemblies) {
    name
  }
}

mutation deleteProjectAssemblies($ids: [String!]!) {
  deleteProjectAssemblies(ids: $ids)
}

enum TransportType {
  truck
  train
  ship
  plane
}

input AssemblyLayerInput {
  epdId: String!
  id: String
  name: String
  conversionFactor: Float
  referenceServiceLife: Int
  description: String
  transportType: TransportType
  transportDistance: Float
  transportUnit: String
}

input AssemblyLayerUpdateInput {
  id: String!
  epdId: String!
  name: String
  conversionFactor: Float
  referenceServiceLife: Int
  description: String
  transportType: TransportType
  transportDistance: Float
  transportUnit: String
}

input AssemblyLayerDeleteInput {
  id: String!
}

mutation addProjectAssemblyLayers($id: String!, $layers: [AssemblyLayerInput!]!) {
  addProjectAssemblyLayers(id: $id, layers: $layers) {
    id
    name
  }
}

mutation updateProjectAssemblyLayers($id: String!, $layers: [AssemblyLayerUpdateInput!]!) {
  updateProjectAssemblyLayers(id: $id, layers: $layers) {
    id
    name
  }
}

mutation deleteProjectAssemblyLayers($id: String!, $layers: [AssemblyLayerDeleteInput!]!) {
  deleteProjectAssemblyLayers(id: $id, layers: $layers)
}
